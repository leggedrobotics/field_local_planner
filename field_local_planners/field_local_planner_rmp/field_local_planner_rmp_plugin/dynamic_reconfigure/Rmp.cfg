#!/usr/bin/env python
PACKAGE = "field_local_planner"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("base_inverted",           bool_t,   0, "Invert the base orientation by 180 deg", False)
gen.add("differential_mode",       bool_t,   0, "Ignore lateral velocities", False)
gen.add("robot_length",            double_t, 0, "Robot length",   1.000, 0.1, 10.0)
gen.add("robot_width",             double_t, 0, "Robot width",   1.000, 0.1, 10.0)
gen.add("robot_height",            double_t, 0, "Robot height",   1.000, 0.1, 10.0)
gen.add("distance_to_goal_thr",    double_t, 0, "Distance threshold to determine when goal is reached",   1.000, 0.1, 10.0)
gen.add("orientation_to_goal_thr", double_t, 0, "Orientation threshold to determine when goal is reached",   1.000, 0.1, 10.0)
gen.add("max_linear_velocity_x",   double_t, 0, "Maximum linear velocity along x-axis",   1.000, 0.1, 10.0)
gen.add("max_linear_velocity_y",   double_t, 0, "Maximum linear velocity along y-axis",   1.000, 0.1, 10.0)
gen.add("max_angular_velocity_z",  double_t, 0, "Maximum rotational velocity along z-axis",   1.000, 0.1, 10.0)

gen.add("sphere_radius_factor",    double_t, 0, "RMP radius factor to inflate spheres",   1.2, 0.1, 10.0)
gen.add("integration_time",        double_t, 0, "RMP Integration time",    0.1,  0.001,   10.0)

rmp = "geodesic_goal"
gen.add(f"{rmp}_weight",           double_t, 0, f"RMP {rmp} weight",            1.0, 0.0, 1.0)
gen.add(f"{rmp}_gain",             double_t, 0, f"RMP {rmp} gain",              10.00, 0.001, 100.0)
# gen.add(f"{rmp}_metric_type",      str_t,    0, f"RMP {rmp} type",              "logistic")
# gen.add(f"{rmp}_metric_offset",    double_t, 0, f"RMP {rmp} offset",            0.5,  0.0,   10.0)
# gen.add(f"{rmp}_metric_steepness", double_t, 0, f"RMP {rmp} steepness",         10.00,  0.1,   10.0)

rmp = "geodesic_heading"
gen.add(f"{rmp}_weight",           double_t, 0, f"RMP {rmp} weight",            1.0, 0.0, 1.0)
gen.add(f"{rmp}_gain",             double_t, 0, f"RMP {rmp} gain",              10.000, 0.001, 100.0)
# gen.add(f"{rmp}_metric_type",      str_t,    0, f"RMP {rmp} type",              "logistic")
# gen.add(f"{rmp}_metric_offset",    double_t, 0, f"RMP {rmp} offset",            0.5,  0.0,   10.0)
# gen.add(f"{rmp}_metric_steepness", double_t, 0, f"RMP {rmp} steepness",         10.00,  0.1,   10.0)

rmp = "goal_position"
gen.add(f"{rmp}_weight",           double_t, 0, f"RMP {rmp} weight",            0.0, 0.0, 1.0)
gen.add(f"{rmp}_gain",             double_t, 0, f"RMP {rmp} gain",              10.000, 0.001, 100.0)
# gen.add(f"{rmp}_metric_type",      str_t,    0, f"RMP {rmp} type",              "inv_logistic")
# gen.add(f"{rmp}_metric_offset",    double_t, 0, f"RMP {rmp} offset",            1.0,  0.0,   10.0)
# gen.add(f"{rmp}_metric_steepness", double_t, 0, f"RMP {rmp} steepness",         10.00,  0.1,   10.0)

rmp = "goal_orientation"
gen.add(f"{rmp}_weight",           double_t, 0, f"RMP {rmp} weight",            1.0, 0.0, 1.0)
gen.add(f"{rmp}_gain",             double_t, 0, f"RMP {rmp} gain",              10.000, 0.001, 100.0)
# gen.add(f"{rmp}_metric_type",      str_t,    0, f"RMP {rmp} type",              "inv_logistic")
# gen.add(f"{rmp}_metric_offset",    double_t, 0, f"RMP {rmp} offset",            0.5,  0.0,   10.0)
# gen.add(f"{rmp}_metric_steepness", double_t, 0, f"RMP {rmp} steepness",         10.00,  0.1,   10.0)

rmp = "velocity_heading"
gen.add(f"{rmp}_weight",           double_t, 0, f"RMP {rmp} weight",            0.0, 0.0, 1.0)
gen.add(f"{rmp}_gain",             double_t, 0, f"RMP {rmp} gain",              1.000, 0.001, 100.0)
# gen.add(f"{rmp}_metric_type",      str_t,    0, f"RMP {rmp} type",              "logistic")
# gen.add(f"{rmp}_metric_offset",    double_t, 0, f"RMP {rmp} offset",            1.0,  0.0,   10.0)
# gen.add(f"{rmp}_metric_steepness", double_t, 0, f"RMP {rmp} steepness",         10.00,  0.1,   10.0)

rmp = "damping"
gen.add(f"{rmp}_weight",           double_t, 0, f"RMP {rmp} weight",            1.0, 0.0, 1.0)
gen.add(f"{rmp}_gain",             double_t, 0, f"RMP {rmp} gain",              0.1, 0.001, 100.0)
# gen.add(f"{rmp}_metric_type",      str_t,    0, f"RMP {rmp} type",              "constant")
# gen.add(f"{rmp}_metric_offset",    double_t, 0, f"RMP {rmp} offset",            1.0,  0.0,   10.0)
# gen.add(f"{rmp}_metric_steepness", double_t, 0, f"RMP {rmp} steepness",         10.00,  0.1,   10.0)

rmp = "sdf_obstacle"
gen.add(f"{rmp}_weight",           double_t, 0, f"RMP {rmp} weight",            1.0, 0.0, 1.0)
gen.add(f"{rmp}_gain",             double_t, 0, f"RMP {rmp} gain",              1.0, 0.001, 100.0)
# gen.add(f"{rmp}_metric_type",      str_t,    0, f"RMP {rmp} type",              "velocity")
# gen.add(f"{rmp}_metric_offset",    double_t, 0, f"RMP {rmp} offset",            0.3,  0.0,   10.0)
# gen.add(f"{rmp}_metric_steepness", double_t, 0, f"RMP {rmp} steepness",         10.00,  0.1,   10.0)

rmp = "regularization"
gen.add(f"{rmp}_weight",           double_t, 0, f"RMP {rmp} weight",            1.0, 0.0, 1.0)
gen.add(f"{rmp}_gain",             double_t, 0, f"RMP {rmp} gain",              0.001, 0.001, 100.0)
# gen.add(f"{rmp}_metric_type",      str_t,    0, f"RMP {rmp} type",              "constant")
# gen.add(f"{rmp}_metric_offset",    double_t, 0, f"RMP {rmp} offset",            0.0,  0.0,   10.0)
# gen.add(f"{rmp}_metric_steepness", double_t, 0, f"RMP {rmp} steepness",         1.00,  0.1,   10.0)

exit(gen.generate(PACKAGE, "field_local_planner_rmp_plugin", "Rmp"))
