# Plugin
local_planner: field_local_planner::FalcoPlugin

# Base settings
requires_sensing: false # it should be true for all the local planners
control_rate: 10 # in Hz, rate at which the control command is computed
base_inverted: false # to flip the orientation of the robot 180 deg
differential_mode: false # If the robot moves with a differential model

# Robot size
robot_length: 1.0
robot_width: 0.5
robot_height: 0.5

# Frames
base_frame: base
fixed_frame: odom
valid_goal_frames: ["odom", "map"]

# Grid map conversion to cloud
grid_map_to_cloud: true
grid_map_to_cloud_range: 2.0
grid_map_to_cloud_filter_size: 0.05 # meters

# Thresholds
distance_to_goal_thr: 0.1 # meters
orientation_to_goal_thr: 0.1  # radians

# Velocity limits
max_linear_velocity_x: 1.0    # m/s
max_linear_velocity_y: 1.0    # m/s
max_angular_velocity_z: 1.0   # rad/s

falco:
  # Safety distance to try to reach a goal
  goal_clearance: 0.1 # meters

  # Gains when computing the velocity commands (not used)
  forward_linear_gain_p: 1.0
  forward_angular_gain_p: 1.0

  # Acceleration used to change the actual velocity:
  linear_acceleration: 0.1 # m / s^2

  # FALCO evaluates the precomputed trajectories at 
  # different scales to find a collision free path
  # It goes from `falco_path_scale` and decreases till
  # `falco_min_path_scale` at a rate `falco_path_scale_step`
  path_scale: 1.0
  path_scale_step: 0.25
  min_path_scale: 0.75

  # The path ranges are used to check that the scaling
  # path doesn't go beyond some limits
  # It starts at the `sensor range` and finishes 
  # at `falco_min_path_range`
  path_range_step: 0.5 #meters
  min_path_range: 1.0 # meters

  # Distance used to select the point that must be 
  # followed using the `carrot-on-a-stick` approach
  look_ahead_distance: 0.5

  # Cost used to select the path
  # FALCO solves a maximum likelihood estimation over 
  # the paths, trying to maximize a "free space score"
  # The costs below are used to compute some of the scores

  # Differential mode gives more score to paths in the
  # front and back of the robot using a mixture of Von Mises
  # distributions. 
  # Larger values mean more "concentrated" distributions,
  # similar to smaller covariances in a Gaussian
  differential_mode_cost: 1.0

  # The goal cost gives more score to paths that head
  # toward the goal. It's modeled using an unimodal 
  # Von Mises distribution.
  # The interpretation of the cost is the same as above
  # (larger -> more concentrated)
  goal_cost: 10.0

  # Thresholds with the number of collisions expected
  # from a path before discarding it
  point_per_path_thr:  10 # 2 # default from CMU

  # Flags
  # The parameters below are flags that enable features
  # The paths can be used to check if the robot can collide
  # if rotates in a certain direction
  # TODO: needs to be improved
  check_rotational_collisions: false

  # While the paths are checked at several scales, if
  # the goal is close enough, we can use the distance 
  # to the goal to crop the range
  use_path_crop_by_goal: true