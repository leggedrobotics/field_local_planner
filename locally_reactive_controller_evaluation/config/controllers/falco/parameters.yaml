name: falco

# If the controller is perceptive (uses external sensing)
is_perceptive: true
use_elevation_map_cloud: true

# Safety distance to try to reach a goal
falco/goal_clearance: 0.1 # meters

# Gains when computing the velocity commands (not used)
falco/forward_linear_gain_p: 1.0
falco/forward_angular_gain_p: 3.0

# Acceleration used to change the actual velocity:
falco/linear_acceleration: 0.1 # m / s^2

# FALCO evaluates the precomputed trajectories at 
# different scales to find a collision free path
# It goes from `falco_path_scale` and decreases till
# `falco_min_path_scale` at a rate `falco_path_scale_step`
falco/path_scale: 1.0
falco/path_scale_step: 0.25
falco/min_path_scale: 0.75

# The path ranges are used to check that the scaling
# path doesn't go beyond some limits
# It starts at the `sensor range` and finishes 
# at `falco_min_path_range`
falco/path_range_step: 0.5 #meters
falco/min_path_range: 1.0 # meters

# Distance used to select the point that must be 
# followed using the `carrot-on-a-stick` approach
falco/look_ahead_distance: 0.5

# Cost used to select the path
# FALCO solves a maximum likelihood estimation over 
# the paths, trying to maximize a "free space score"
# The costs below are used to compute some of the scores

# Differential mode gives more score to paths in the
# front and back of the robot using a mixture of Von Mises
# distributions. 
# Larger values mean more "concentrated" distributions,
# similar to smaller covariances in a Gaussian
falco/differential_mode_cost: 1.0

# The goal cost gives more score to paths that head
# toward the goal. It's modeled using an unimodal 
# Von Mises distribution.
# The interpretation of the cost is the same as above
# (larger -> more concentrated)
falco/goal_cost: 10.0

# Thresholds with the number of collisions expected
# from a path before discarding it
falco/point_per_path_thr:  20 # 2 # default from CMU

# Flags
# The parameters below are flags that enable features
# The paths can be used to check if the robot can collide
# if rotates in a certain direction
# TODO: needs to be improved
falco/check_rotational_collisions: false

# While the paths are checked at several scales, if
# the goal is close enough, we can use the distance 
# to the goal to crop the range
falco/use_path_crop_by_goal: true