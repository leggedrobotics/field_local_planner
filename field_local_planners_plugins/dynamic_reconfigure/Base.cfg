#!/usr/bin/env python
PACKAGE = "field_local_planners"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("robot_length",                double_t, 0, "Robot length",  0.6, 0.1,   5.0)
gen.add("robot_width",                 double_t, 0, "Robot width",   0.4, 0.1,   5.0)
gen.add("robot_height",                double_t, 0, "Robot height",  0.4, 0.1,   2.0)
gen.add("robot_clearance",             double_t, 0, "Robot clearance", 0.1, 0.01,   1.0)

gen.add("max_forward_linear_velocity", double_t, 0, "Max Forward Linear Velocity",        0.15, 0.0,   1.5)
gen.add("max_lateral_linear_velocity", double_t, 0, "Max Lateral Linear Velocity",        0.05, 0.0,   1.2)
gen.add("max_angular_velocity",        double_t, 0, "Max Angular Velocity",       0.2, 0.0,   1.4)
gen.add("max_turning_linear_velocity", double_t, 0, "Max Turning Linear Velocity",        0.07, 0.0,   1.2)
gen.add("min_linear_velocity",         double_t, 0, "Min Linear Velocity",       0.0, 0.01,   0.1)
gen.add("min_angular_velocity",        double_t, 0, "Min Angular Velocity",      0.0, 0.01,   0.1)

gen.add("goal_distance_threshold",        double_t, 0, "Goal Distance Threshold", 0.1, 0.0,   1)
gen.add("goal_heading_threshold",         double_t, 0, "Goal Heading Threshold",   0.1, 0.0,   1)
gen.add("turn_to_face_heading_threshold", double_t, 0, "Turn to Face Heading Threshold",   0.2, 0.0,   0.4)
gen.add("angular_gain_p",                 double_t, 0, "Angular Proportional Gain",        0.5, 0.0,   10.0)
gen.add("linear_gain_p",                  double_t,   0, "Linear Gain",  0.5, 0.0, 10.0)

goal_behind_mode_enum = gen.enum([ gen.const("ignore",     int_t, 0, "ignore"),
                                   gen.const("backwards",  int_t, 1, "backwards"),
                                   gen.const("turnaround", int_t, 2, "turnaround")],
                                   "Goal Behind Mode")
gen.add("goal_behind_mode", int_t, 0, "How to deal with goals behind the robot", 1, 0, 2, edit_method=goal_behind_mode_enum)

motion_mode_enum = gen.enum([ gen.const("turnwalkturn", int_t, 0, "turnwalkturn"),
                              gen.const("shuffle",      int_t, 1, "shuffle")],
                              "Motion Mode")
gen.add("motion_mode", int_t, 0, "How to move: turnwalkturn or shuffle", 0, 0, 1, edit_method=motion_mode_enum)


gen.add("back_is_front",                    bool_t,   0, "Back is front", True)
gen.add("yaw_exclusive_turns",              bool_t,   0, "Yaw exclusive turns", True)
gen.add("ignore_intermediate_goal_heading", bool_t,   0, "Ignore intermediate goal heading", True)
gen.add("differential_drive",               bool_t,   0, "Ignore lateral velocities", True)
gen.add("planar_motion",                    bool_t,   0, "Ignore z/roll/pitch velocities", True)
gen.add("stand_safe",                       bool_t,   0, "Computes a control even when it reached the goal", False)

# Perceptive parameters
gen.add("voxel_size_filter",    double_t, 0, "Perceptive Voxel size filter",  0.05, 0.01,   2.0)
gen.add("sensor_range",         double_t, 0, "Perceptive Sensor range",  3.5, 0.1,   10.0)
gen.add("traversable_thr",      double_t, 0, "Perceptive Traversable thr (from base frame)",  0.75, 0.000, 1.0)

# Unreachability
gen.add("check_unreachability",                    bool_t,   0, "Use unreachability",  True)
gen.add("unreachability_time_threshold",           double_t, 0, "Time threshold",  30.0, 0.0,   180.0)
gen.add("unreachability_delta_progress_threshold", double_t, 0, "Delta progress threshold",  0.0001, 0.000, 1.0)

exit(gen.generate(PACKAGE, "field_local_planners", "LocallyReactiveController"))
